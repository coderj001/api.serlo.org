type User implements AbstractUuid & ThreadAware {
  id: Int!
  trashed: Boolean!
  threads(
    after: String
    before: String
    first: Int
    last: Int
    archived: Boolean
    trashed: Boolean
  ): ThreadsConnection!
  alias: String
  username: String!
  date: DateTime!
  lastLogin: DateTime
  roles: [ScopedRole!]!
  description: String
  activeAuthor: Boolean!
  activeDonor: Boolean!
  activeReviewer: Boolean!
}

extend type Query {
  activeAuthors(
    after: String
    before: String
    first: Int
    last: Int
  ): UserConnection!
  activeDonors(
    after: String
    before: String
    first: Int
    last: Int
  ): UserConnection!
  activeReviewers(
    after: String
    before: String
    first: Int
    last: Int
  ): UserConnection!
}

type UserConnection {
  edges: [UserEdge!]!
  nodes: [User!]!
  totalCount: Int!
  pageInfo: PageInfo!
}

type UserEdge {
  cursor: String!
  node: User!
}
