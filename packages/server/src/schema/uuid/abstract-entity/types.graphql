interface AbstractEntity {
  # extends AbstractUuid
  id: Int!
  trashed: Boolean!
  events(
    after: String
    before: String
    first: Int
    last: Int
    instance: Instance
    actorId: Int
  ): AbstractNotificationEventConnection!

  # extends AbstractRepository
  date: DateTime!
  instance: Instance!
  alias: String
  license: License!
  subject: Subject
}

interface AbstractEntityRevision {
  # extends AbstractUuid
  id: Int!
  trashed: Boolean!
  events(
    after: String
    before: String
    first: Int
    last: Int
    instance: Instance
    actorId: Int
  ): AbstractNotificationEventConnection!

  # extends AbstractRevision
  author: User!
  date: DateTime!
  content: String!

  changes: String!
}

type AbstractEntityConnection {
  edges: [AbstractEntityCursor!]!
  nodes: [AbstractEntity!]!
  totalCount: Int!
  pageInfo: PageInfo!
}

type AbstractEntityCursor {
  cursor: String!
  node: AbstractEntity!
}

extend type Mutation {
  entity: EntityMutation!
}

type EntityMutation {
  addRevision(input: AddRevisionInput!): AddRevisionResponse!
  checkoutRevision(input: CheckoutRevisionInput!): CheckoutRevisionResponse!
  rejectRevision(input: RejectRevisionInput!): RejectRevisionResponse!
}

input AddRevisionInput {
  changes: String!
  content: String!
  entityId: Int!
  needsReview: Boolean!
  subscribeThisByEmail: Boolean!
  subscribeThis: Boolean!
  title: String!
  metaDescription: String
  metaTitle: String
}

input CheckoutRevisionInput {
  revisionId: Int!
  reason: String!
}

type AddRevisionResponse {
  success: Boolean!
}

type CheckoutRevisionResponse {
  success: Boolean!
  query: Query!
}

input RejectRevisionInput {
  revisionId: Int!
  reason: String!
}

type RejectRevisionResponse {
  success: Boolean!
  query: Query!
}
