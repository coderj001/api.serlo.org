type User implements AbstractUuid & ThreadAware {
  id: Int!
  trashed: Boolean!
  threads(
    after: String
    before: String
    first: Int
    last: Int
    archived: Boolean
    trashed: Boolean
  ): ThreadsConnection!
  events(
    after: String
    before: String
    first: Int
    last: Int
    instance: Instance
    actorId: Int
  ): AbstractNotificationEventConnection!
  eventsByUser(
    after: String
    before: String
    first: Int
    last: Int
    instance: Instance
    objectId: Int
  ): AbstractNotificationEventConnection!
  alias: String
  username: String!
  date: DateTime!
  lastLogin: DateTime
  roles(
    after: String
    before: String
    first: Int
    last: Int
  ): ScopedRoleConnection!
  description: String
  activeAuthor: Boolean!
  activeDonor: Boolean!
  activeReviewer: Boolean!
}

extend type Query {
  activeAuthors(
    after: String
    before: String
    first: Int
    last: Int
  ): UserConnection!
  activeDonors(
    after: String
    before: String
    first: Int
    last: Int
  ): UserConnection!
  activeReviewers(
    after: String
    before: String
    first: Int
    last: Int
  ): UserConnection!
}

type UserConnection {
  edges: [UserEdge!]!
  nodes: [User!]!
  totalCount: Int!
  pageInfo: PageInfo!
}

type UserEdge {
  cursor: String!
  node: User!
}

extend type Mutation {
  user: UserMutation!
}

type UserMutation {
  deleteBot(input: UserDeleteBotInput!): [UserDeleteBotResponse!]!
  deleteRegularUser(
    input: UserDeleteRegularUserInput!
  ): [UserDeleteRegularUserResponse!]!
  setEmail(input: UserSetEmailInput!): UserSetEmailResponse!
}

input UserDeleteBotInput {
  botIds: [Int!]!
}

type UserDeleteBotResponse {
  success: Boolean!
  username: String!
  reason: String
}

input UserDeleteRegularUserInput {
  userIds: [Int!]!
}

type UserDeleteRegularUserResponse {
  success: Boolean!
  username: String
  reason: String
}

input UserSetEmailInput {
  userId: Int!
  email: String!
}

type UserSetEmailResponse {
  success: Boolean!
  username: String!
  email: String!
}
